# Example file showing a basic pygame "game loop"
import pygame
import os.path
from sys import exit
from pygame.sprite import Group
from random import randint,choice

scriptDir = os.path.dirname(os.path.abspath(__file__))

#Class to make the tower
class makeTower(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        #Frames for the Tower
        tower0Surface = pygame.image.load(os.path.join(scriptDir,"graphics/Tower","sprite_Tower0.png")).convert_alpha()
        tower0Surface = pygame.transform.scale_by(tower0Surface,.7)
        tower2Surface = pygame.image.load(os.path.join(scriptDir,"graphics/Tower","sprite_Tower2.png")).convert_alpha()
        tower2Surface = pygame.transform.scale_by(tower0Surface,.7)
        tower3Surface = pygame.image.load(os.path.join(scriptDir,"graphics/Tower","sprite_Tower3.png")).convert_alpha()
        tower3Surface = pygame.transform.scale_by(tower0Surface,.7)
        
        self.towerBreak = [tower0Surface,tower2Surface,tower3Surface]
        self.towerIndex = 0
        
        self.image = self.towerBreak[self.towerIndex]
        self.rect = self.image.get_rect(midbottom =(100,500))


#class hold all enemies for the game
class Obstacle(pygame.sprite.Sprite):
    def __init__(self,type):
        super().__init__()

        if type == "LandDragon":
            dragonWalk1= pygame.image.load(os.path.join(scriptDir,"graphics/Land Dragon","sprite_LandDragon0.png")).convert_alpha()
            dragonWalk2= pygame.image.load(os.path.join(scriptDir,"graphics/Land Dragon","sprite_LandDragon1.png")).convert_alpha()
            dragonWalk3= pygame.image.load(os.path.join(scriptDir,"graphics/Land Dragon","sprite_LandDragon2.png")).convert_alpha()
            
            self.frame = [dragonWalk1,dragonWalk2,dragonWalk3]
            yPos = 475
        else:
            dragonFly1= pygame.image.load(os.path.join(scriptDir,"graphics/Sky Dragon","sprite_SkyDragon0.png")).convert_alpha()
            dragonFly2= pygame.image.load(os.path.join(scriptDir,"graphics/Sky Dragon","sprite_SkyDragon1.png")).convert_alpha()
            self.frame = [dragonFly1,dragonFly2]
            yPos = 260
            
        self.obstacleIndex = 0
        
        self.image = self.frame[self.obstacleIndex]
        self.rect = self.image.get_rect(bottomright=(randint(1200, 1250), yPos))
        
    def animationState(self):
        self.obstacleIndex+= 0.1
        if self.obstacleIndex >= len(self.frame):
            self.obstacleIndex = 0
        self.image = self.frame[int(self.obstacleIndex)]
        
    
    def update(self):
        self.animationState() #check for animation updates
        self.rect.x -= 6 #updating x value
        self.destroy() #check to see if we need to delete objs
        self.clicked()
    def clicked(self):
        click = pygame.mouse.get_pos()
        if pygame.mouse.get_pressed()[0]:
            if self.rect.collidepoint(click):
                self.kill()
        
    def destroy(self):
        #if the rect. hits the left boundary
        #   remove the sprite
        if self.rect.x <= -100:
            self.kill()
def collisionSprite(tower,obstacles):
    if pygame.sprite.spritecollide(tower.sprite, obstacles,False):
        obstacles.empty()
        print("hit")
        return False
    else:
        return True
# def cannonHit(obstacles):
#     if pygame.mouse.get_pressed()[0]:
#         x,y = pygame.mouse.get_pos()
#         print(x,y)
#         if y == obstacles.get_rect():
#             print ("kill")



screenLength = 1200
screenWidth = 720

def main():
    # pygame setup
    pygame.init()
    screen = pygame.display.set_mode((screenLength, screenWidth))
    clock = pygame.time.Clock()
    
    gameActive = True
    
    tower = pygame.sprite.GroupSingle()
    tower.add(makeTower())
    
    obstacleGroup = pygame.sprite.Group()
    
    #TIMER
    obstacleTimer = pygame.USEREVENT + 1 #timer in which a  new obstacle is created
    pygame.time.set_timer(obstacleTimer,1300)#(what to do, how often)
    #timers for obstacles animations
    
    
    #Surfaces for ground and sky
    skySurface = pygame.image.load(os.path.join(scriptDir,"graphics","sky.png")).convert()
    groundSurface = pygame.image.load(os.path.join(scriptDir,"graphics","grass.png")).convert()
    largeSky=pygame.transform.scale2x(skySurface)
    largeGround=pygame.transform.scale_by(groundSurface,4)
    
    testFont = pygame.font.Font(None, 50)
    
    gameMessage = testFont.render("Press space to revive", False, "black")
    gameMessageRect = gameMessage.get_rect(center=(603, 600))
    #in event handling:

    
    while True:
        # poll for events
        
        # pygame.QUIT event means the user clicked X to close your window
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                exit()
            if gameActive:
                if event.type == obstacleTimer:
                    obstacleGroup.add(Obstacle(choice(["LandDragon","LandDragon","LandDragon","skyDragon","skyDragon"])))
                
        
        #start over
            else: 
                if event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE:
                    gameActive = True
                    #snailRect.left= 800#temp fix
                    startTime = int(pygame.time.get_ticks()/1000)
    
        if gameActive:
            #background Surfaces
            screen.blit(largeSky,(0,0))
            screen.blit(largeGround,(0,475))
            
            tower.draw(screen)
            tower.update()
            
            obstacleGroup.draw(screen)
            obstacleGroup.update()
            
            gameActive = collisionSprite(tower, obstacleGroup)
            
        else: 
            screen.fill("darkred")
            
            screen.blit(gameMessage,gameMessageRect)

    # flip() the display to put your work on screen
        pygame.display.update()

        clock.tick(60)  # limits FPS to 60

if __name__ == "__main__":
    main()
